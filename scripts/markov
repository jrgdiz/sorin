#! /usr/bin/env python3
# -*- coding: utf-8 -*-
 
import argparse
from Markov import Markov


parser = argparse.ArgumentParser(description="Generator of Markov chains")
parser.add_argument("-m", "--minlen", help="minimum length of the output string", type=int, metavar="N")
parser.add_argument("-M", "--maxlen", help="maximum length of the output string", type=int, metavar="N")
parser.add_argument("-d", "--delimiter", help="token delimiter", default=" ", metavar="DEL")
parser.add_argument("-x", "--sentence-delimiter", help="sentence delimiter", default="\n", metavar="DEL")
parser.add_argument("-o", "--odds", nargs="+", help="list of ngrams, as frequently as they should be used", type=int, default=[1], metavar="NGRAM")
parser.add_argument("-c", "--corpus", help="load corpus from a textfile", metavar="PATH")
parser.add_argument("-l", "--load-chains", help="load chains from a textfile", metavar="PATH")
parser.add_argument("-s", "--save-chains", help="save chains to a textfile", metavar="PATH")
parser.add_argument("-b", "--backlog", help="load backlog from a textfile", metavar="PATH")
parser.add_argument("-n", "--number", help="how many sentences to produce", type=int, default=1, metavar="N")
parser.add_argument("-k", "--check", help="check against corpus and backlog for repetitions", action="store_true")
args = parser.parse_args()

stdin = (not args.corpus)

m = Markov(corpusStdin=stdin, odds=args.odds, delimiter=args.delimiter, sentenceDelimiter=args.sentence_delimiter, corpusFile=args.corpus, chainsFile=args.load_chains, backlogFile=args.backlog)

if args.save_chains:
	m.save_chains(args.save_chains)

output = []

for i in range(args.number):
	x = m.generate(minlen=args.minlen, maxlen=args.maxlen, check=args.check)
	output.append(m.linearize(x))

if output:
	print(args.sentence_delimiter.join(output))
